{"version":3,"sources":["/Users/haoyuezhang/Documents/dev/dui/src/components/Snackbar/README.md","/Users/haoyuezhang/Documents/dev/dui/sites/dui/pages/Snackbar.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","name","__position","__code","__scope","this","Snackbar","Button","Modal","Playground","Props","Component","useState","useCallback","Fragment","type","style","margin","onClick","show","message","duration","autoClose","closable","action","onClickAction","console","log","Date","toLocaleTimeString","id","loadingBar","isClosed","handleClick","close","snackbarVisible","setSnackbarVisible","toggleSnackbar","marginLeft","visible","modalVisible","setModalVisible","handleSnackbarClose","handleClickAction","openModal","closeModal","title","onCancel","onOk","onClose","Demo","args","state","bind","setState","prevState","Container","background","width","height","display","justifyContent","alignItems","padding"],"mappings":"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","file":"static/js/sites-dui-pages-snackbar.cbc15de3.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3 {...{\n      \"id\": \"snackbar\"\n    }}>{`Snackbar`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`参数`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`默认值`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类名`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`样式`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`zIndex`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`组件弹出层zIndex`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`10000`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`visible`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`是否显示，只在以组件形式调用时有效`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`'info' `}{`|`}{` 'success' `}{`|`}{` 'error' `}{`|`}{` 'loading'`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`'info'`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`showIcon`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`是否显示该消息类型对应的图标`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`message`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`主体信息，也可通过children传入`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ReactNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`action`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`附加操作。传入数组时可设置多个操作。`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ReactNode `}{`|`}{` ISnackbarAction[]`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onClickAction`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`\b用户点击附加操作时的回调，当action不为数组时生效`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`() => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`closable`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`是否显示关闭按钮`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onClose`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`关闭snackbar时的回调。点击操作和关闭按钮时都会调用此方法。因为react单向数据流的特点，在以组件形式使用时，除了自己的逻辑外，还需要在此方法里设置visible为false。`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`() => void `}{`|`}{` false`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`containerDom`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`用于指定snackbar挂载的dom，优先级低于Snackbar.Container组件`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`HTMLElement`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`document.body`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`spinType`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type为loading时旋转动画的类型`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`'light' `}{`|`}{` 'dark' `}{`|`}{` 'primary'`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`'primary'`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`ISnackbarAction类型如下`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface ISnackbarAction {\n    text: ReactNode;\n    onClick?: () => void;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"snackbarshow-特有\"\n    }}>{`Snackbar.show 特有`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`参数`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`默认值`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`autoClose`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`是否自动消失，只在以方法形式调用时有效`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`true`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`duration`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`自动消失的毫秒数，只在以方法形式调用时且autoClose为true时有效`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`2000`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`id`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`应为应用内唯一定值，多个相同id的Snackbar实例在同一个位置只会展示最新的一个（互斥），不自动消失的Snackbar若不设置此参数则不互斥`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <blockquote>\n      <p parentName=\"blockquote\">{`visible 参数只在以组件形式使用时有效，duration 参数只在以方法形式使用时，且传入autoClose:true（默认情况）有效`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`在autoClose为false时，调用Snackbar.show返回{update, close}，可用于更新和手动关闭snackbar。若设置了closable或者action，此时用户点击也可关闭。以方法形式调用时，在onClose中返回false可以阻止Snackbar被点击行为关闭，此时需要自己手动调用close来将其关闭。`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"snackbarcontainer\"\n    }}>{`Snackbar.Container`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`参数`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`描述`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`默认值`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`类名`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`style`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`样式`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`-`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <blockquote>\n      <p parentName=\"blockquote\">{`位于Container内的Snackbar元素会显示于Container内，而非页面固定位置`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`需要注意Container元素自身的宽高及位置是否正确，例如是否由于子元素脱离文档流(绝对定位、float等)导致Container高度为0`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Modal也可以当作Snackbar.Container使用`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"snackbarshowconfigdefaults\"\n    }}>{`Snackbar.show.configDefaults`}</h3>\n    <p>{`可用于`}<strong parentName=\"p\">{`全局`}</strong>{`配置（影响整个项目）Snackbar.show方法参数的`}<strong parentName=\"p\">{`默认值`}</strong>{`，用法如下`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`Snackbar.show.configDefaults({\n    duration: 1000,\n    style: { zIndex: 20000 }\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Snackbar, Button, Modal } from '../../../src'\nimport { Playground } from 'docz'\nimport Props from '../../../src/components/Snackbar/README.md'\nimport { Component, useState, useCallback, Fragment } from 'react'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Demo = makeShortcode(\"Demo\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"snackbar-提示操作弹出框\"\n    }}>{`Snackbar 提示操作弹出框`}</h1>\n    <h2 {...{\n      \"id\": \"基本\"\n    }}>{`基本`}</h2>\n    <Playground __position={0} __code={'<Button\\n  type=\\\"primary\\\"\\n  style={{ margin: \\'10px\\' }}\\n  onClick={() =>\\n    Snackbar.show({\\n      message: \\'操作成功\\',\\n      type: \\'success\\',\\n      duration: 3000,\\n    })\\n  }\\n>\\n  自动消失的通知\\n</Button>\\n<Button\\n  type=\\\"warning\\\"\\n  style={{ margin: \\'10px\\' }}\\n  onClick={() =>\\n    Snackbar.show({\\n      message: \\'操作失败\\',\\n      type: \\'error\\',\\n      autoClose: false,\\n      closable: true,\\n      action: \\'重试\\',\\n      onClickAction: () => {\\n        console.log(\\'重试\\')\\n      },\\n    })\\n  }\\n>\\n  点击消失的通知\\n</Button>\\n<Button\\n  style={{ margin: \\'10px\\' }}\\n  onClick={() =>\\n    Snackbar.show({\\n      message: \\'文件已放入回收站\\',\\n      type: \\'info\\',\\n      duration: 3000,\\n      action: \\'撤销\\',\\n      onClickAction: () => console.log(\\'已撤销\\'),\\n    })\\n  }\\n>\\n  自动消失，也可点击消失的通知\\n</Button>\\n<Button\\n  style={{ margin: \\'10px\\' }}\\n  onClick={() =>\\n    Snackbar.show({\\n      message: `当前时间是${new Date().toLocaleTimeString()}`,\\n      autoClose: false,\\n      closable: true,\\n      action: \\'好的\\',\\n      onClickAction: () => {\\n        console.log(\\'好的\\')\\n      },\\n      id: \\'my-snackbar-1\\',\\n    })\\n  }\\n>\\n  点击消失，但互斥的通知\\n</Button>'} __scope={{\n      props: this ? this.props : props,\n      Snackbar,\n      Button,\n      Modal,\n      Playground,\n      Props,\n      Component,\n      useState,\n      useCallback,\n      Fragment\n    }} mdxType=\"Playground\">\n    <Button type=\"primary\" style={{\n        margin: '10px'\n      }} onClick={() => Snackbar.show({\n        message: '操作成功',\n        type: 'success',\n        duration: 3000\n      })} mdxType=\"Button\">\n        自动消失的通知\n    </Button>\n    <Button type=\"warning\" style={{\n        margin: '10px'\n      }} onClick={() => Snackbar.show({\n        message: '操作失败',\n        type: 'error',\n        autoClose: false,\n        closable: true,\n        action: '重试',\n        onClickAction: () => {\n          console.log('重试');\n        }\n      })} mdxType=\"Button\">\n        点击消失的通知\n    </Button>\n    <Button style={{\n        margin: '10px'\n      }} onClick={() => Snackbar.show({\n        message: '文件已放入回收站',\n        type: 'info',\n        duration: 3000,\n        action: '撤销',\n        onClickAction: () => console.log('已撤销')\n      })} mdxType=\"Button\">\n        自动消失，也可点击消失的通知\n    </Button>\n    <Button style={{\n        margin: '10px'\n      }} onClick={() => Snackbar.show({\n        message: `当前时间是${new Date().toLocaleTimeString()}`,\n        autoClose: false,\n        closable: true,\n        action: '好的',\n        onClickAction: () => {\n          console.log('好的');\n        },\n        id: 'my-snackbar-1'\n      })} mdxType=\"Button\">\n        点击消失，但互斥的通知\n    </Button>\n    </Playground>\n    <h2 {...{\n      \"id\": \"loading\"\n    }}>{`loading`}</h2>\n    <Playground __position={1} __code={'() => {\\n  let loadingBar\\n  let isClosed = true\\n  const handleClick = () => {\\n    if (!isClosed) {\\n      loadingBar.close()\\n      isClosed = true\\n    } else {\\n      loadingBar = Snackbar.show({\\n        autoClose: false, // 若为true（默认），则不会返回引用\\n        type: \\'loading\\',\\n        message: \\'正在加载中...\\',\\n      })\\n      isClosed = false\\n    }\\n  }\\n\\n  // 组件\\n  const Demo = () => {\\n    const [snackbarVisible, setSnackbarVisible] = useState(false)\\n\\n    const toggleSnackbar = useCallback(() => {\\n      setSnackbarVisible(!snackbarVisible)\\n    }, [snackbarVisible])\\n\\n    return (\\n      <Fragment>\\n        <Button type=\\\"primary\\\" onClick={toggleSnackbar}>\\n          组件形式打开/关闭\\n        </Button>\\n        <Button style={{ marginLeft: \\'20px\\' }} onClick={handleClick}>\\n          函数形式打开/关闭\\n        </Button>\\n        <Snackbar type=\\\"loading\\\" visible={snackbarVisible}>\\n          正在加载中...\\n        </Snackbar>\\n      </Fragment>\\n    )\\n  }\\n\\n  return <Demo />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Snackbar,\n      Button,\n      Modal,\n      Playground,\n      Props,\n      Component,\n      useState,\n      useCallback,\n      Fragment\n    }} mdxType=\"Playground\">\n      {() => {\n        let loadingBar;\n        let isClosed = true;\n\n        const handleClick = () => {\n          if (!isClosed) {\n            loadingBar.close();\n            isClosed = true;\n          } else {\n            loadingBar = Snackbar.show({\n              autoClose: false,\n              // 若为true（默认），则不会返回引用\n              type: 'loading',\n              message: '正在加载中...'\n            });\n            isClosed = false;\n          }\n        }; // 组件\n\n\n        const Demo = () => {\n          const [snackbarVisible, setSnackbarVisible] = useState(false);\n          const toggleSnackbar = useCallback(() => {\n            setSnackbarVisible(!snackbarVisible);\n          }, [snackbarVisible]);\n          return <Fragment mdxType=\"Fragment\">\n                <Button type=\"primary\" onClick={toggleSnackbar} mdxType=\"Button\">组件形式打开/关闭</Button>\n                <Button style={{\n              marginLeft: '20px'\n            }} onClick={handleClick} mdxType=\"Button\">函数形式打开/关闭</Button>\n                <Snackbar type=\"loading\" visible={snackbarVisible} mdxType=\"Snackbar\">\n                    正在加载中...\n                </Snackbar>\n            </Fragment>;\n        };\n\n        return <Demo mdxType=\"Demo\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"和modal联动\"\n    }}>{`和Modal联动`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const [snackbarVisible, setSnackbarVisible] = useState(false)\\n  const [modalVisible, setModalVisible] = useState(false)\\n  const handleSnackbarClose = useCallback(() => {\\n    console.log(\\'closed\\')\\n    setSnackbarVisible(false)\\n  }, [])\\n\\n  const handleClickAction = useCallback(() => {\\n    console.log(\\'点赞数+1\\')\\n  }, [])\\n\\n  const toggleSnackbar = useCallback(() => {\\n    setSnackbarVisible(!snackbarVisible)\\n  }, [snackbarVisible])\\n\\n  const openModal = useCallback(() => {\\n    setModalVisible(true)\\n  }, [])\\n\\n  const closeModal = useCallback(() => {\\n    setModalVisible(false)\\n  }, [])\\n\\n  return (\\n    <Fragment>\\n      <Button type=\\\"primary\\\" onClick={openModal}>\\n        打开Modal\\n      </Button>\\n      <Modal\\n        visible={modalVisible}\\n        title=\\\"标题\\\"\\n        onCancel={closeModal}\\n        onOk={closeModal}\\n      >\\n        <Snackbar\\n          action=\\\"赞一个\\\"\\n          closable\\n          onClose={handleSnackbarClose}\\n          onClickAction={handleClickAction}\\n          type=\\\"success\\\"\\n          visible={snackbarVisible}\\n        >\\n          操作成功\\n        </Snackbar>\\n        <Button type=\\\"primary\\\" onClick={toggleSnackbar}>\\n          {snackbarVisible ? \\'关闭\\' : \\'打开\\'}Snackbar\\n        </Button>\\n      </Modal>\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Snackbar,\n      Button,\n      Modal,\n      Playground,\n      Props,\n      Component,\n      useState,\n      useCallback,\n      Fragment\n    }} mdxType=\"Playground\">\n      {() => {\n        const [snackbarVisible, setSnackbarVisible] = useState(false);\n        const [modalVisible, setModalVisible] = useState(false);\n        const handleSnackbarClose = useCallback(() => {\n          console.log('closed');\n          setSnackbarVisible(false);\n        }, []);\n        const handleClickAction = useCallback(() => {\n          console.log('点赞数+1');\n        }, []);\n        const toggleSnackbar = useCallback(() => {\n          setSnackbarVisible(!snackbarVisible);\n        }, [snackbarVisible]);\n        const openModal = useCallback(() => {\n          setModalVisible(true);\n        }, []);\n        const closeModal = useCallback(() => {\n          setModalVisible(false);\n        }, []);\n        return <Fragment mdxType=\"Fragment\">\n            <Button type=\"primary\" onClick={openModal} mdxType=\"Button\">打开Modal</Button>\n            <Modal visible={modalVisible} title=\"标题\" onCancel={closeModal} onOk={closeModal} mdxType=\"Modal\">\n                <Snackbar action=\"赞一个\" closable onClose={handleSnackbarClose} onClickAction={handleClickAction} type=\"success\" visible={snackbarVisible} mdxType=\"Snackbar\">\n                    操作成功\n                </Snackbar>\n                <Button type=\"primary\" onClick={toggleSnackbar} mdxType=\"Button\">{snackbarVisible ? '关闭' : '打开'}Snackbar</Button>\n            </Modal>\n        </Fragment>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"指定挂载容器\"\n    }}>{`指定挂载容器`}</h2>\n    <Playground __position={3} __code={'() => {\\n  const Demo = class Demo extends Component {\\n    constructor(...args) {\\n      super(...args)\\n      this.state = {\\n        visible: false,\\n      }\\n      this.handleSnackbarClose = this.handleSnackbarClose.bind(this)\\n      this.handleClickAction = this.handleClickAction.bind(this)\\n      this.toggleSnackbar = this.toggleSnackbar.bind(this)\\n    }\\n\\n    handleSnackbarClose() {\\n      console.log(\\'closed\\')\\n      this.setState({ visible: false })\\n    }\\n\\n    handleClickAction() {\\n      console.log(\\'点赞数+1\\')\\n    }\\n\\n    toggleSnackbar() {\\n      this.setState(prevState => ({ visible: !prevState.visible }))\\n    }\\n\\n    render() {\\n      const { visible } = this.state\\n      return (\\n        <Snackbar.Container\\n          style={{\\n            background: \\'#f2f2f2\\',\\n            width: \\'300px\\',\\n            height: \\'200px\\',\\n            display: \\'flex\\',\\n            justifyContent: \\'center\\',\\n            alignItems: \\'flex-end\\',\\n            padding: \\'20px\\',\\n          }}\\n        >\\n          <Snackbar\\n            action=\\\"赞一个\\\"\\n            closable\\n            onClose={this.handleSnackbarClose}\\n            onClickAction={this.handleClickAction}\\n            type=\\\"success\\\"\\n            visible={visible}\\n          >\\n            操作成功\\n          </Snackbar>\\n          <Button type=\\\"primary\\\" onClick={this.toggleSnackbar}>\\n            {visible ? \\'关闭\\' : \\'打开\\'}Snackbar\\n          </Button>\\n        </Snackbar.Container>\\n      )\\n    }\\n  }\\n\\n  return <Demo />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Snackbar,\n      Button,\n      Modal,\n      Playground,\n      Props,\n      Component,\n      useState,\n      useCallback,\n      Fragment\n    }} mdxType=\"Playground\">\n      {() => {\n        const Demo = class Demo extends Component {\n          constructor(...args) {\n            super(...args);\n            this.state = {\n              visible: false\n            };\n            this.handleSnackbarClose = this.handleSnackbarClose.bind(this);\n            this.handleClickAction = this.handleClickAction.bind(this);\n            this.toggleSnackbar = this.toggleSnackbar.bind(this);\n          }\n\n          handleSnackbarClose() {\n            console.log('closed');\n            this.setState({\n              visible: false\n            });\n          }\n\n          handleClickAction() {\n            console.log('点赞数+1');\n          }\n\n          toggleSnackbar() {\n            this.setState(prevState => ({\n              visible: !prevState.visible\n            }));\n          }\n\n          render() {\n            const {\n              visible\n            } = this.state;\n            return <Snackbar.Container style={{\n              background: '#f2f2f2',\n              width: '300px',\n              height: '200px',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              padding: '20px'\n            }}>\n                    <Snackbar action=\"赞一个\" closable onClose={this.handleSnackbarClose} onClickAction={this.handleClickAction} type=\"success\" visible={visible} mdxType=\"Snackbar\">\n                        操作成功\n                    </Snackbar>\n                    <Button type=\"primary\" onClick={this.toggleSnackbar} mdxType=\"Button\">\n                        {visible ? '关闭' : '打开'}Snackbar\n                    </Button>\n                </Snackbar.Container>;\n          }\n\n        };\n        return <Demo mdxType=\"Demo\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"参数\"\n    }}>{`参数`}</h2>\n    <Props mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}